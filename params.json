{"name":"websocket-non-blocking-cpp","tagline":"websocket non-blocking server implementation in C++","body":"# Websocket non-blocking C++ Server implementation #\r\n\r\nhttp://akinaru.github.io/websocket-non-blocking-cpp/\r\n\r\n\r\nWebsocket non-blocking Server implementation using QTNetwork framework (QT4)\r\n\r\n<i>Last update 16/05/2015</i>\r\n\r\n* [16/05/2015] add SSL/TLS support\r\n* [14/05/2015] add Client event listener\r\n\r\n<hr/>\r\n\r\nYou will find : \r\n* source in ./libwebsocket folder\r\n* test project with secured and unsecured JS websocket client exemples featuring interactions with websocket server in ./libwebsocket-test folder\r\n\r\n<hr/>\r\n\r\n<b>How to launch Websocket Server ?</b>\r\n\r\n```\r\nWebsocketServer server;\r\n\r\nbool success = server.listen(QHostAddress(ip),port)\r\n```\r\n\r\nSpecifying your own ip / port\r\n\r\n<hr/>\r\n\r\n<b>How to monitor my clients connected to server ?</b>\r\n\r\nAdd an instance of ``ClientSocketHandler`` you can import with ``#include \"ClientSockethandler.h\"`` :\r\n\r\n``ClientSocketHandler *clientHandler = new ClientSocketHandler();``\r\n\r\nJust add this listener to server object. \r\n\r\n``server.addClientEventListener(clientHandler);``\r\n\r\nIn this ``ClientSocketHandler`` you have 3 callbacks that will notify you on client connection change and arrival of client messages :\r\n\r\n* ``void onClientClose(IWebsocketClient &client);`` notify when client socket close\r\n* ``void onClientConnection(IWebsocketClient &client);`` notify when client socket connect to server\r\n* ``void onMessageReceivedFromClient(IWebsocketClient &client,std::string message);`` notify when a socket client send a message to you\r\n\r\nYou can send a message back with ``IWebsocketClient`` sent from the same callback with ``sendMessage(std::string textToSend)`` method :\r\n\r\n```\r\nvoid ClientSocketHandler::onMessageReceivedFromClient(IWebsocketClient &client,string message)\r\n{\r\n    cout << \"Client socket message received : \" << message.data() << endl;\r\n\r\n    client.sendMessage(\"OK I received your message !\");\r\n}\r\n```\r\n\r\n<hr/>\r\n\r\n<b>How to launch a SSL secured websocket server ?</b>\r\n\r\n```\r\nWebsocketServer server;\r\n\r\nserver.setSSL(true); // set SSL to true (default is false)\r\n\r\n```\r\n\r\nThen you set your public/private/ca certificates separately with respective methods : \r\n\r\n```\r\nserver.setPublicCert(SslHandler::retrieveCertFromFile(PUBLIC_CERT));\r\nserver.setPrivateCert(SslHandler::retrieveKeyCertFile(PRIVATE_CERT,PRIVATE_CERT_PASS));\r\nserver.setCaCert(SslHandler::retrieveveCaCertListFromFile(CA_CERTS));\r\n```\r\n\r\nYou can use static method from SslHandler in libwebsocket-test project folder\r\n\r\n* public cert must be a QSslCertificate : SslHandler::retrieveCertFromFile(char * filepath)\r\n* private cert must be a QSslKey : SslHandler::retrieveKeyCertFile(char * filepath,char * passKey)\r\n* ca cert must be a QList of QSslCertificate : SslHandler::retrieveveCaCertListFromFile(char * filepath)\r\n\r\nEventually add event listener as described above and start websocket server : \r\n\r\n```\r\nserver.addClientEventListener(clientHandler);\r\n\r\nbool success = server.listen(QHostAddress(ip),port)\r\n\r\n```\r\nSpecifying your own ip / port\r\n\r\n<hr/>\r\n\r\n<b>Troubleshooting SSL errors with local browser JS client</b> \r\n\r\n<i>Bad certificate | Unknown CA errors</i>\r\n\r\nThis could mean you didn't import your not-trusted-CA certificate into your browser.\r\n\r\n<i>The remote host closed the connection</i>\r\n\r\nUsually happen when your browser closed the connection before the end of SSL handshake. If you already added your CA to your browser dont worry.\r\nBoth Chrome and Firefox need to MANUALLY add the certificate (in a popup) so putting it in parameter menu don't change anything.\r\n\r\nJust load your URL with \"https\" : https://127.0.0.1:8443 . Browser will prompt you to accept the certificates and it will probably solve your connection error.\r\n\r\n<b>Browser tested</b>\r\n\r\nThis has been tested on following browser : \r\n* Chrome\r\n* Chromium\r\n* Firefox\r\n\r\n<hr/>\r\n\r\n<b>Debugging SSL connection error</b>\r\n\r\nI recommmend using openssl command line tool to debug ssl connection : \r\n\r\n``openssl s_client -connect 127.0.0.1:8443``\r\n\r\n<hr/>\r\n\r\n<b>Server-Client key/cert generation</b>\r\n\r\nCerts are in libwesocket-test/certs folder, you will find server,client and ca cert build with easy-rsa :\r\n\r\nhttps://github.com/OpenVPN/easy-rsa\r\n\r\nWith last release of easy-rsa, you can build your own key with the following : \r\n\r\n* ``./build-ca`` : generate a new CA for you\r\n* ``./build-server-full myServer`` : will build for you public cert and private cert signed with CA for server\r\n* ``./build-client-full myClient`` : will build for you public cert and private cert signed with CA for client\r\n\r\n<hr/>\r\n\r\n<b>How to close my websocket server ?</b>\r\n\r\n``server.close();``\r\n\r\n<hr/>\r\n\r\n<b>COMMAND LINE SYNTAX</b> \r\n\r\nFrom /libwesocket-test/release folder : \r\n\r\nThe following will open a websocket on port 8443 (default port value for my exemple)\r\n\r\n``./libwebsocket-test 127.0.0.1 8443``\r\n\r\nYou can add library path to LD_LIBRARY_PATH variable for a quick run :\r\n\r\n``LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ROOT/websocket-non-blocking-cpp/lib/:$ROOT/websocket-non-blocking-cpp/libwebsocket/release/``\r\n\r\n<hr/>\r\n\r\n<b>Exemple with Javascript Client</b>\r\n\r\n* Launch the websocket server on port 8443\r\n* Open the javascript client page in ./exemples/js/ folder\r\n\r\n=> You have now a complete websocket chat between C++ websocket server <-> javascript client in websocket \r\n\r\n![client side](https://raw.github.com/akinaru/websocket-non-blocking-cpp/master/exemples/readme_images/clientSide.png)\r\n\r\n\r\n![server side](https://raw.github.com/akinaru/websocket-non-blocking-cpp/master/exemples/readme_images/serverSide.png)\r\n<hr/>\r\n\r\n* Project is Qt4 compliant\r\n* You can build it with qmake\r\n* Development on QtCreator\r\n* Specification from https://tools.ietf.org/html/rfc6455\r\n","google":"UA-62569105-1","note":"Don't delete this file! It's used internally to help with page regeneration."}